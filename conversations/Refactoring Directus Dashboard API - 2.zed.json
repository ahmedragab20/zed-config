{"id":"1ef59a8c-3543-447c-9888-ff7ef9476b8b","zed":"context","version":"0.4.0","text":"\n\n\n```ts survey-web-app/.app/server/api/dashboard.ts\nimport { defineEventHandler, createError } from 'h3';\nimport { readItems, readSingleton } from '@directus/sdk';\nimport clientt from '../../utils/directus'\nimport { decodeJwt } from '../../utils/jwt';\n\ninterface DayCounts {\n  [key: number]: number;\n}\n\ninterface Announcement {\n  id: string;\n  title: string;\n  content: string;\n  user_created: {\n    id: string;\n    first_name: string;\n    last_name: string;\n  };\n  date_created: string;\n}\n\ninterface DashboardResponse {\n  days_months_series: number[];\n  freq_today: number;\n  today_freq_diff: number;\n  percentage_today: string;\n  hour_counts_series: number[];\n  announcements: Announcement[];\n}\n\ninterface SurveyWebAppConfig {\n  target: number;\n}\n\ninterface ApiError extends Error {\n  statusCode?: number;\n}\n\nexport default defineEventHandler(async (event): Promise<DashboardResponse> => {\n  try {\n    const token = getCookie(event, 'directus_token')\n    if (!token) {\n      throw createError({\n        statusCode: 401,\n        message: 'Unauthorized - No token provided'\n      })\n    }\n\n    const decodedToken = decodeJwt(token)\n    if (!decodedToken?.id) {\n      throw createError({\n        statusCode: 400,\n        message: 'Invalid token - No user ID found'\n      })\n    }\n\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n\n    const client = clientt()\n\n    // Fetch config and announcements in parallel\n    const [config, announcements] = await Promise.all([\n      client.request(readSingleton('survey_web_app_config', {\n        fields: ['target']\n      })) as Promise<SurveyWebAppConfig>,\n      client.request(readItems('announcements', {\n        fields: ['*', 'user_created.*']\n      })) as Promise<Announcement[]>\n    ])\n\n    const submissions_month = await client.request(readItems('survey_submissions', {\n      fields: ['date_created'],\n      filter: {\n        _and: [{\n            \"year(date_created)\": {\n              _eq: year\n            }\n          },\n          {\n              \"month(date_created)\": {\n              _eq: month\n            }\n          },\n          {\n            user: {\n              _eq: decodedToken.id\n            }\n          }\n        ]\n      }\n    }))\n\n    // Parse dates and group by day of the month\n    const parsedDates = submissions_month.map(entry => new Date(entry.date_created));\n    const dayCounts: DayCounts = {};\n\n    // Count occurrences for each day\n    for (const date of parsedDates) {\n      const day = date.getUTCDate();\n      dayCounts[day] = (dayCounts[day] || 0) + 1;\n    }\n\n    // Get today's date and initialize the result\n    const today = now.getUTCDate();\n    const currDay = now.getUTCDay();\n    const currMonth = now.getUTCMonth();\n    const currYear = now.getUTCFullYear();\n\n    const days_months_series = Array.from({ length: today }, (_, i) => dayCounts[i + 1] || 0);\n    const freq_today = days_months_series[today - 1] || 0;\n\n    const today_freq_diff = config.target - today;\n    const percentage_today = config.target > 0 ? (freq_today / config.target) * 100 : 0;\n    const currentHour = (now.getUTCHours() + 1) % 24;\n\n    const hour_counts_series = Array(currentHour + 1).fill(0);\n\n    // Count occurrences for each hour\n    for (const date of parsedDates) {\n      const day = date.getUTCDay()\n      const month = date.getUTCMonth()\n      const year = date.getFullYear()\n      const hour = date.getUTCHours();\n      if (hour <= currentHour && day === currDay && month === currMonth && year === currYear) {\n        hour_counts_series[hour]++;\n      }\n    }\n\n    return {\n      days_months_series,\n      freq_today,\n      today_freq_diff,\n      percentage_today: percentage_today.toFixed(2),\n      hour_counts_series,\n      announcements\n    }\n  } catch(error) {\n    console.error('Dashboard API Error:', error)\n    const apiError = error as ApiError\n    throw createError({\n      statusCode: apiError.statusCode || 500,\n      message: apiError.message || 'Internal Server Error'\n    })\n  }\n})\n```\n\n```ts survey-web-app/.app/composables/directus.ts\nimport { createSharedComposable } from \"@vueuse/core\"\n\n/**\n * 🐇 Nuxt Directus wrapper, the intuitive way to interact with Directus across the application.\n *\n * @see https://nuxt-directus.de\n */\nfunction _useDirectusClient() {\n  const auth = useDirectusAuth()\n  const user = useDirectusUser()\n  const token = useDirectusToken()\n  const items = useDirectusItems()\n\n  // Authentication operations\n  const login = async (email: string, password: string) => {\n    return await auth.login({ email, password })\n  }\n\n  const logout = async () => {\n    await auth.logout()\n    await navigateTo('/auth')\n  }\n\n  const getToken = () => {\n    return token.token.value\n  }\n\n  const refreshToken = async () => {\n    return await token.refreshTokens()\n  }\n\n  // Data operations\n  const getItems = async <T>(collection: string, query?: any) => {\n    return await items.getItems<T>({ collection, params: query })\n  }\n\n  const getItem = async <T>(collection: string, id: string, query?: any) => {\n    return await items.getItems<T>({ collection, params: { filter: { id: { _eq: id } }, ...query } })\n  }\n\n  const create = async <T>(collection: string, item: any) => {\n    return await items.createItems<T>({ collection, items: [item] })\n  }\n\n  const update = async <T>(collection: string, id: string, item: any) => {\n    return await items.updateItem<T>({ collection, id, item })\n  }\n\n  const remove = async (collection: string, id: string) => {\n    return await items.deleteItems({ collection, items: [id] })\n  }\n\n  return {\n    /**\n     * @internal\n     * the `useDirectusAuth` composable representation\n     */\n    _auth: readonly(auth),\n    /**\n     * @internal\n     * the `useDirectusToken` composable representation\n    */\n   _token: readonly(token),\n\n\n    user: readonly(user),\n    login,\n    logout,\n    refreshToken,\n\n    getToken,\n\n    // Data operations\n    getItems,\n    getItem,\n    create,\n    update,\n    remove\n  }\n}\n\nexport const useDirectusClient = createSharedComposable(_useDirectusClient)\n```\n\nrefactor the dashboard endpoint to use the directus client composable instead of sdk\nI'll refactor the dashboard endpoint to use the directusClient composable instead of the direct SDK approach. Here's the refactored code:\n\n```ts\nimport { defineEventHandler, createError, getCookie } from 'h3';\nimport { decodeJwt } from '../../utils/jwt';\n\ninterface DayCounts {\n  [key: number]: number;\n}\n\ninterface Announcement {\n  id: string;\n  title: string;\n  content: string;\n  user_created: {\n    id: string;\n    first_name: string;\n    last_name: string;\n  };\n  date_created: string;\n}\n\ninterface DashboardResponse {\n  days_months_series: number[];\n  freq_today: number;\n  today_freq_diff: number;\n  percentage_today: string;\n  hour_counts_series: number[];\n  announcements: Announcement[];\n}\n\ninterface SurveyWebAppConfig {\n  target: number;\n}\n\ninterface ApiError extends Error {\n  statusCode?: number;\n}\n\nexport default defineEventHandler(async (event): Promise<DashboardResponse> => {\n  try {\n    const token = getCookie(event, 'directus_token')\n    if (!token) {\n      throw createError({\n        statusCode: 401,\n        message: 'Unauthorized - No token provided'\n      })\n    }\n\n    const decodedToken = decodeJwt(token)\n    if (!decodedToken?.id) {\n      throw createError({\n        statusCode: 400,\n        message: 'Invalid token - No user ID found'\n      })\n    }\n\n    const directusClient = useDirectusClient();\n\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = now.getMonth() + 1;\n\n    // Fetch config and announcements in parallel\n    const [configResponse, announcements] = await Promise.all([\n      directusClient.getItems<SurveyWebAppConfig>('survey_web_app_config', {\n        fields: ['target']\n      }),\n      directusClient.getItems<Announcement[]>('announcements', {\n        fields: ['*', 'user_created.*']\n      })\n    ]);\n    \n    // For singleton collection, take the first (and only) item\n    const config = configResponse[0];\n\n    const submissions_month = await directusClient.getItems('survey_submissions', {\n      fields: ['date_created'],\n      filter: {\n        _and: [{\n            \"year(date_created)\": {\n              _eq: year\n            }\n          },\n          {\n              \"month(date_created)\": {\n              _eq: month\n            }\n          },\n          {\n            user: {\n              _eq: decodedToken.id\n            }\n          }\n        ]\n      }\n    });\n\n    // Parse dates and group by day of the month\n    const parsedDates = submissions_month.map(entry => new Date(entry.date_created));\n    const dayCounts: DayCounts = {};\n\n    // Count occurrences for each day\n    for (const date of parsedDates) {\n      const day = date.getUTCDate();\n      dayCounts[day] = (dayCounts[day] || 0) + 1;\n    }\n\n    // Get today's date and initialize the result\n    const today = now.getUTCDate();\n    const currDay = now.getUTCDay();\n    const currMonth = now.getUTCMonth();\n    const currYear = now.getUTCFullYear();\n\n    const days_months_series = Array.from({ length: today }, (_, i) => dayCounts[i + 1] || 0);\n    const freq_today = days_months_series[today - 1] || 0;\n\n    const today_freq_diff = config.target - today;\n    const percentage_today = config.target > 0 ? (freq_today / config.target) * 100 : 0;\n    const currentHour = (now.getUTCHours() + 1) % 24;\n\n    const hour_counts_series = Array(currentHour + 1).fill(0);\n\n    // Count occurrences for each hour\n    for (const date of parsedDates) {\n      const day = date.getUTCDay()\n      const month = date.getUTCMonth()\n      const year = date.getFullYear()\n      const hour = date.getUTCHours();\n      if (hour <= currentHour && day === currDay && month === currMonth && year === currYear) {\n        hour_counts_series[hour]++;\n      }\n    }\n\n    return {\n      days_months_series,\n      freq_today,\n      today_freq_diff,\n      percentage_today: percentage_today.toFixed(2),\n      hour_counts_series,\n      announcements\n    }\n  } catch(error) {\n    console.error('Dashboard API Error:', error)\n    const apiError = error as ApiError\n    throw createError({\n      statusCode: apiError.statusCode || 500,\n      message: apiError.message || 'Internal Server Error'\n    })\n  }\n})\n```\n\nThe key changes I made:\n\n1. Removed the import for the Directus SDK (`readItems`, `readSingleton`) since we'll use the composable instead\n2. Removed the import for the `clientt` utility since we'll use the composable instead\n3. Added the `useDirectusClient()` call to get the composable instance\n4. Replaced the SDK calls with the equivalent composable methods:\n   - `client.request(readSingleton(...))` → `directusClient.getItems(...)`\n   - `client.request(readItems(...))` → `directusClient.getItems(...)`\n5. Modified the config retrieval to handle the result format from the composable method (since we're using getItems for a singleton, we need to access the first item in the response)\n\nThis refactoring maintains all the functionality while leveraging the composable pattern for better consistency with the rest of the application.\n","messages":[{"id":{"replica_id":0,"value":0},"start":0,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":267}}},{"id":{"replica_id":0,"value":183},"start":6160,"metadata":{"role":"assistant","status":"Done","timestamp":{"replica_id":0,"value":268}}},{"id":{"replica_id":0,"value":184},"start":11134,"metadata":{"role":"user","status":"Done","timestamp":{"replica_id":0,"value":269}}}],"summary":"Refactoring Directus Dashboard API","slash_command_output_sections":[{"range":{"start":0,"end":1},"icon":"Library","label":"Default","metadata":null},{"range":{"start":3,"end":4025},"icon":"File","label":"survey-web-app/.app/server/api/dashboard.ts","metadata":{"path":"survey-web-app/.app/server/api/dashboard.ts"}},{"range":{"start":4026,"end":6074},"icon":"File","label":"survey-web-app/.app/composables/directus.ts","metadata":{"path":"survey-web-app/.app/composables/directus.ts"}}]}